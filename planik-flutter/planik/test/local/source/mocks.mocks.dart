// Mocks generated by Mockito 5.0.16 from annotations
// in planik/test/local/source/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:planik/foundation/extensions/dates.dart' as _i2;
import 'package:planik/local/dao/user_dao.dart' as _i3;
import 'package:planik/local/entity/user_entity.dart' as _i5;
import 'package:planik/local/store/user_store.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDateTime_0 extends _i1.Fake implements DateTime {}

/// A class which mocks [Dates].
///
/// See the documentation for Mockito's code generation for more information.
class MockDates extends _i1.Mock implements _i2.Dates {
  MockDates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime now() =>
      (super.noSuchMethod(Invocation.method(#now, []), returnValue: _FakeDateTime_0()) as DateTime);

  @override
  int nowMillis() => (super.noSuchMethod(Invocation.method(#nowMillis, []), returnValue: 0) as int);

  @override
  String toString() => super.toString();
}

/// A class which mocks [UserDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDao extends _i1.Mock implements _i3.UserDao {
  MockUserDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.UserEntity>> findAll() => (super.noSuchMethod(Invocation.method(#findAll, []),
          returnValue: Future<List<_i5.UserEntity>>.value(<_i5.UserEntity>[]))
      as _i4.Future<List<_i5.UserEntity>>);

  @override
  _i4.Future<_i5.UserEntity?> findOneById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findOneById, [id]),
          returnValue: Future<_i5.UserEntity?>.value()) as _i4.Future<_i5.UserEntity?>);

  @override
  _i4.Future<_i5.UserEntity?> findOneByUid(String? uid) =>
      (super.noSuchMethod(Invocation.method(#findOneByUid, [uid]),
          returnValue: Future<_i5.UserEntity?>.value()) as _i4.Future<_i5.UserEntity?>);

  @override
  _i4.Future<int> insertOne(_i5.UserEntity? entity) => (super
          .noSuchMethod(Invocation.method(#insertOne, [entity]), returnValue: Future<int>.value(0))
      as _i4.Future<int>);

  @override
  _i4.Future<int> updateOne(_i5.UserEntity? entity) => (super
          .noSuchMethod(Invocation.method(#updateOne, [entity]), returnValue: Future<int>.value(0))
      as _i4.Future<int>);

  @override
  _i4.Future<void> insertOrUpdateOne(_i5.UserEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#insertOrUpdateOne, [entity]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOneById(int? id) =>
      (super.noSuchMethod(Invocation.method(#deleteOneById, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMany(List<_i5.UserEntity>? entities) =>
      (super.noSuchMethod(Invocation.method(#deleteMany, [entities]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [UserStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStore extends _i1.Mock implements _i6.UserStore {
  MockUserStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> getUid() =>
      (super.noSuchMethod(Invocation.method(#getUid, []), returnValue: Future<String?>.value())
          as _i4.Future<String?>);

  @override
  _i4.Future<void> putUid({String? uid}) =>
      (super.noSuchMethod(Invocation.method(#putUid, [], {#uid: uid}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  _i4.Future<int?> getId() =>
      (super.noSuchMethod(Invocation.method(#getId, []), returnValue: Future<int?>.value())
          as _i4.Future<int?>);

  @override
  _i4.Future<void> putId({int? id}) => (super.noSuchMethod(Invocation.method(#putId, [], {#id: id}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  _i4.Future<bool> getHasPlan() => (super.noSuchMethod(Invocation.method(#getHasPlan, []),
      returnValue: Future<bool>.value(false)) as _i4.Future<bool>);

  @override
  _i4.Future<void> putHasPlan({bool? hasPlan}) =>
      (super.noSuchMethod(Invocation.method(#putHasPlan, [], {#hasPlan: hasPlan}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);

  @override
  String toString() => super.toString();
}
